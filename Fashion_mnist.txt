import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.layers import Dense,Conv2D,MaxPooling2D,Flatten , Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
# from tensorflow.keras.preprocessing.image import ImageData


train = pd.read_csv('Datasets/5 Fashion MNIST/fashion-mnist_train.csv')
test = pd.read_csv('Datasets/5 Fashion MNIST/fashion-mnist_test.csv')

xtrain = train.iloc[:,1:].values
ytrain = train.iloc[:,0].values

xtest = test.iloc[:,1:].values
ytest = test.iloc[:,0].values

print(f"the size of xtrain: {xtrain.shape}")
print(f"the size of ytrain: {ytrain.shape}")
print(f"the size of xtest: {xtest.shape}")
print(f"the size of ytest: {ytest.shape}")

#Reshape the Data and normalize it
xtrain = xtrain.reshape(-1,28,28,1)
xtest = xtest.reshape(-1,28,28,1)

xtrain = xtrain / 255.0
xtest = xtest / 255.0

print(f"the size of xtrain: {xtrain.shape}")
print(f"the size of ytrain: {ytrain.shape}")
print(f"the size of xtest: {xtest.shape}")
print(f"the size of ytest: {ytest.shape}")

ytrain = to_categorical(ytrain, num_classes=10)  # Adjust the number of classes as needed
ytest = to_categorical(ytest, num_classes=10)

model = Sequential([

    Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1)),
    MaxPooling2D((2,2)),

    Conv2D(64,(3,3),activation='relu'),
    MaxPooling2D((2,2)),

    Flatten(),

    #Fully Connected Dense layer
    Dense(128,activation='relu'),
    Dropout(0.5),   #Dropout for regularization

    Dense(10,activation='softmax'),
    Dropout(0.5)
])

#compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# train the model
model.fit(xtrain,ytrain,epochs=10,batch_size=64,validation_split=0.2)

# Evaluate the model on the test set
test_loss, test_accuracy = model.evaluate(xtest, ytest, verbose=0)
print(f"Test Accuracy: {test_accuracy:.4f}")
