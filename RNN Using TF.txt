import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense
import matplotlib.pyplot as plt

# Generate the 2-times table sequence
sequence = np.array([2 * i for i in range(1, 21)])  # e.g., [2, 4, 6, 8, ..., 40]

# Prepare data for training
X = []
y = []
window_size = 3  # Use the last 3 values to predict the next one

for i in range(len(sequence) - window_size):
    X.append(sequence[i:i + window_size])  # Input sequence of 3 numbers
    y.append(sequence[i + window_size])    # Target is the next number

X = np.array(X)
y = np.array(y)

# Reshape X to fit the RNN input (samples, timesteps, features)
X = X.reshape((X.shape[0], X.shape[1], 1))  # (samples, timesteps, features)

# Build the RNN model
model = Sequential([
    SimpleRNN(10, activation='relu', input_shape=(window_size, 1)),  # 10 units in the RNN layer
    Dense(1)  # Output layer with 1 unit to predict the next number
])

# Compile the model
model.compile(optimizer='adam', loss='mse')

# Train the model
model.fit(X, y, epochs=200, verbose=1)

# Testing the model on the same 2-times table sequence
predicted_sequence = []
input_seq = X[0]  # Initial input sequence for prediction

for i in range(len(sequence) - window_size):
    prediction = model.predict(input_seq.reshape(1, window_size, 1))
    predicted_sequence.append(prediction[0, 0])

    # Update the input sequence for the next prediction
    input_seq = np.roll(input_seq, -1)
    input_seq[-1] = prediction[0, 0]

# Plot the original and predicted sequences
plt.plot(sequence, label="Original Sequence", marker='o')
plt.plot(range(window_size, len(sequence)), predicted_sequence, label="Predicted Sequence", marker='x', linestyle='--')
plt.legend()
plt.xlabel("Index")
plt.ylabel("Value")
plt.title("2-Times Table Sequence Prediction")
plt.show()
